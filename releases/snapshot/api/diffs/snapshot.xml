<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Thu Aug 10 18:28:08 UTC 2023 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="Jimfs HEAD-SNAPSHOT"
  jdversion="1.1.1">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath _util/lib/jdiff.jar:_util/lib/xerces-for-jdiff.jar -sourcepath /tmp/release-snapshot-temp.cPO/src -classpath /tmp/release-snapshot-temp.cPO/classes:/home/runner/.m2/repository/com/google/guava/guava/32.1.2-jre/guava-32.1.2-jre.jar:/home/runner/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/home/runner/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/runner/.m2/repository/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar:/home/runner/.m2/repository/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar:/home/runner/.m2/repository/com/ibm/icu/icu4j/73.2/icu4j-73.2.jar:/home/runner/.m2/repository/com/google/auto/service/auto-service-annotations/1.1.1/auto-service-annotations-1.1.1.jar:/home/runner/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/home/runner/.m2/repository/org/checkerframework/checker-qual/3.37.0/checker-qual-3.37.0.jar:/home/runner/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/home/runner/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/runner/.m2/repository/com/google/guava/guava-testlib/32.1.2-jre/guava-testlib-32.1.2-jre.jar:/home/runner/.m2/repository/com/google/truth/truth/1.1.5/truth-1.1.5.jar:/home/runner/.m2/repository/com/google/auto/value/auto-value-annotations/1.10.1/auto-value-annotations-1.10.1.jar:/home/runner/.m2/repository/org/ow2/asm/asm/9.5/asm-9.5.jar -subpackages com.google.common -encoding UTF-8 -doclet jdiff.JDiff -docletpath _util/lib/jdiff.jar:_util/lib/xerces-for-jdiff.jar -apiname Jimfs HEAD-SNAPSHOT -apidir /tmp/release-snapshot-temp.cPO -exclude com.google.common.base.internal -protected -->
<package name="com.google.common.jimfs">
  <!-- start class com.google.common.jimfs.AttributeProvider -->
  <class name="AttributeProvider" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AttributeProvider"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="name" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the view name that's used to get attributes from this provider.]]>
      </doc>
    </method>
    <method name="inherits" return="com.google.common.collect.ImmutableSet&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the names of other providers that this provider inherits attributes from.]]>
      </doc>
    </method>
    <method name="viewType" return="java.lang.Class&lt;? extends java.nio.file.attribute.FileAttributeView&gt;"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the type of the view interface that this provider supports.]]>
      </doc>
    </method>
    <method name="view" return="java.nio.file.attribute.FileAttributeView"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lookup" type="com.google.common.jimfs.FileLookup"/>
      <param name="inheritedViews" type="com.google.common.collect.ImmutableMap&lt;java.lang.String, java.nio.file.attribute.FileAttributeView&gt;"/>
      <doc>
      <![CDATA[Returns a view of the file located by the given lookup callback. The given map contains the
 views inherited by this view.]]>
      </doc>
    </method>
    <method name="defaultValues" return="com.google.common.collect.ImmutableMap&lt;java.lang.String, ?&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userDefaults" type="java.util.Map&lt;java.lang.String, ?&gt;"/>
      <doc>
      <![CDATA[Returns a map containing the default attribute values for this provider. The keys of the map
 are attribute identifier strings (in "view:attribute" form) and the value for each is the
 default value that should be set for that attribute when creating a new file.

 <p>The given map should be in the same format and contains user-provided default values. If the
 user provided any default values for attributes handled by this provider, those values should
 be checked to ensure they are of the correct type. Additionally, if any changes to a
 user-provided attribute are necessary (for example, creating an immutable defensive copy), that
 should be done. The resulting values should be included in the result map along with default
 values for any attributes the user did not provide a value for.]]>
      </doc>
    </method>
    <method name="fixedAttributes" return="com.google.common.collect.ImmutableSet&lt;java.lang.String&gt;"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the set of attributes that are always available from this provider.]]>
      </doc>
    </method>
    <method name="supports" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attribute" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns whether or not this provider supports the given attribute directly.]]>
      </doc>
    </method>
    <method name="attributes" return="com.google.common.collect.ImmutableSet&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="com.google.common.jimfs.File"/>
      <doc>
      <![CDATA[Returns the set of attributes supported by this view that are present in the given file. For
 most providers, this will be a fixed set of attributes.]]>
      </doc>
    </method>
    <method name="get" return="Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="com.google.common.jimfs.File"/>
      <param name="attribute" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the value of the given attribute in the given file or null if the attribute is not
 supported by this provider.]]>
      </doc>
    </method>
    <method name="set"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="com.google.common.jimfs.File"/>
      <param name="view" type="java.lang.String"/>
      <param name="attribute" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
      <param name="create" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the given attribute in the given file object. The {@code create} parameter
 indicates whether or not the value is being set upon creation of a new file via a user-provided
 {@code FileAttribute}.

 @throws IllegalArgumentException if the given attribute is one supported by this provider but
     it is not allowed to be set by the user
 @throws UnsupportedOperationException if the given attribute is one supported by this provider
     and is allowed to be set by the user, but not on file creation and {@code create} is true]]>
      </doc>
    </method>
    <method name="attributesType" return="Class"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the type of file attributes object this provider supports, or null if it doesn't
 support reading its attributes as an object.]]>
      </doc>
    </method>
    <method name="readAttributes" return="java.nio.file.attribute.BasicFileAttributes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="com.google.common.jimfs.File"/>
      <doc>
      <![CDATA[Reads this provider's attributes from the given file as an attributes object.

 @throws UnsupportedOperationException if this provider does not support reading an attributes
     object]]>
      </doc>
    </method>
    <method name="unsettable" return="java.lang.RuntimeException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="view" type="java.lang.String"/>
      <param name="attribute" type="java.lang.String"/>
      <param name="create" type="boolean"/>
      <doc>
      <![CDATA[Throws a runtime exception indicating that the given attribute cannot be set.]]>
      </doc>
    </method>
    <method name="checkNotCreate"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="view" type="java.lang.String"/>
      <param name="attribute" type="java.lang.String"/>
      <param name="create" type="boolean"/>
      <doc>
      <![CDATA[Checks that the attribute is not being set by the user on file creation, throwing an
 unsupported operation exception if it is.]]>
      </doc>
    </method>
    <method name="checkType" return="T"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="view" type="java.lang.String"/>
      <param name="attribute" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
      <param name="type" type="java.lang.Class&lt;T&gt;"/>
      <doc>
      <![CDATA[Checks that the given value is of the given type, returning the value if so and throwing an
 exception if not.]]>
      </doc>
    </method>
    <method name="invalidType" return="java.lang.IllegalArgumentException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="view" type="java.lang.String"/>
      <param name="attribute" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
      <param name="expectedTypes" type="java.lang.Class[]"/>
      <doc>
      <![CDATA[Throws an illegal argument exception indicating that the given value is not one of the expected
 types for the given attribute.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Abstract provider for handling a specific file attribute view.

 @author Colin Decker]]>
    </doc>
  </class>
  <!-- end class com.google.common.jimfs.AttributeProvider -->
  <!-- start class com.google.common.jimfs.Configuration -->
  <class name="Configuration" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="unix" return="com.google.common.jimfs.Configuration"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the default configuration for a UNIX-like file system. A file system created with this
 configuration:

 <ul>
   <li>uses {@code /} as the path name separator (see {@link PathType#unix()} for more
       information on the path format)
   <li>has root {@code /} and working directory {@code /work}
   <li>performs case-sensitive file lookup
   <li>supports only the {@linkplain BasicFileAttributeView basic} file attribute view, to avoid
       overhead for unneeded attributes
   <li>supports hard links, symbolic links, {@link SecureDirectoryStream} and {@link
       FileChannel}
 </ul>

 <p>To create a modified version of this configuration, such as to include the full set of UNIX
 file attribute views, {@linkplain #toBuilder() create a builder}.

 <p>Example:

 <pre>
   Configuration config = Configuration.unix().toBuilder()
       .setAttributeViews("basic", "owner", "posix", "unix")
       .setWorkingDirectory("/home/user")
       .build();  </pre>]]>
      </doc>
    </method>
    <method name="osX" return="com.google.common.jimfs.Configuration"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the default configuration for a Mac OS X-like file system.

 <p>The primary differences between this configuration and the default {@link #unix()}
 configuration are that this configuration does Unicode normalization on the display and
 canonical forms of filenames and does case insensitive file lookup.

 <p>A file system created with this configuration:

 <ul>
   <li>uses {@code /} as the path name separator (see {@link PathType#unix()} for more
       information on the path format)
   <li>has root {@code /} and working directory {@code /work}
   <li>does Unicode normalization on paths, both for lookup and for {@code Path} objects
   <li>does case-insensitive (for ASCII characters only) lookup
   <li>supports only the {@linkplain BasicFileAttributeView basic} file attribute view, to avoid
       overhead for unneeded attributes
   <li>supports hard links, symbolic links and {@link FileChannel}
 </ul>

 <p>To create a modified version of this configuration, such as to include the full set of UNIX
 file attribute views or to use full Unicode case insensitivity, {@linkplain #toBuilder() create
 a builder}.

 <p>Example:

 <pre>
   Configuration config = Configuration.osX().toBuilder()
       .setAttributeViews("basic", "owner", "posix", "unix")
       .setNameCanonicalNormalization(NFD, CASE_FOLD_UNICODE)
       .setWorkingDirectory("/Users/user")
       .build();  </pre>]]>
      </doc>
    </method>
    <method name="windows" return="com.google.common.jimfs.Configuration"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the default configuration for a Windows-like file system. A file system created with
 this configuration:

 <ul>
   <li>uses {@code \} as the path name separator and recognizes {@code /} as a separator when
       parsing paths (see {@link PathType#windows()} for more information on path format)
   <li>has root {@code C:\} and working directory {@code C:\work}
   <li>performs case-insensitive (for ASCII characters only) file lookup
   <li>creates {@code Path} objects that use case-insensitive (for ASCII characters only)
       equality
   <li>supports only the {@linkplain BasicFileAttributeView basic} file attribute view, to avoid
       overhead for unneeded attributes
   <li>supports hard links, symbolic links and {@link FileChannel}
 </ul>

 <p>To create a modified version of this configuration, such as to include the full set of
 Windows file attribute views or to use full Unicode case insensitivity, {@linkplain
 #toBuilder() create a builder}.

 <p>Example:

 <pre>
   Configuration config = Configuration.windows().toBuilder()
       .setAttributeViews("basic", "owner", "dos", "acl", "user")
       .setNameCanonicalNormalization(CASE_FOLD_UNICODE)
       .setWorkingDirectory("C:\\Users\\user") // or "C:/Users/user"
       .build();  </pre>]]>
      </doc>
    </method>
    <method name="forCurrentPlatform" return="com.google.common.jimfs.Configuration"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a default configuration appropriate to the current operating system.

 <p>More specifically, if the operating system is Windows, {@link Configuration#windows()} is
 returned; if the operating system is Mac OS X, {@link Configuration#osX()} is returned;
 otherwise, {@link Configuration#unix()} is returned.

 <p>This is the configuration used by the {@code Jimfs.newFileSystem} methods that do not take a
 {@code Configuration} parameter.

 @since 1.1]]>
      </doc>
    </method>
    <method name="builder" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pathType" type="com.google.common.jimfs.PathType"/>
      <doc>
      <![CDATA[Creates a new mutable {@link Configuration} builder using the given path type.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toBuilder" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new mutable builder that initially contains the same settings as this configuration.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Immutable configuration for an in-memory file system. A {@code Configuration} is passed to a
 method in {@link Jimfs} such as {@link Jimfs#newFileSystem(Configuration)} to create a new {@link
 FileSystem} instance.

 @author Colin Decker]]>
    </doc>
  </class>
  <!-- end class com.google.common.jimfs.Configuration -->
  <!-- start class com.google.common.jimfs.Configuration.Builder -->
  <class name="Configuration.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="setNameDisplayNormalization" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="first" type="com.google.common.jimfs.PathNormalization"/>
      <param name="more" type="com.google.common.jimfs.PathNormalization[]"/>
      <doc>
      <![CDATA[Sets the normalizations that will be applied to the display form of filenames. The display
 form is used in the {@code toString()} of {@code Path} objects.]]>
      </doc>
    </method>
    <method name="setNameCanonicalNormalization" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="first" type="com.google.common.jimfs.PathNormalization"/>
      <param name="more" type="com.google.common.jimfs.PathNormalization[]"/>
      <doc>
      <![CDATA[Returns the normalizations that will be applied to the canonical form of filenames in the
 file system. The canonical form is used to determine the equality of two filenames when
 performing a file lookup.]]>
      </doc>
    </method>
    <method name="setPathEqualityUsesCanonicalForm" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="useCanonicalForm" type="boolean"/>
      <doc>
      <![CDATA[Sets whether {@code Path} objects in the file system use the canonical form (true) or the
 display form (false) of filenames for determining equality of two paths.

 <p>The default is false.]]>
      </doc>
    </method>
    <method name="setBlockSize" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="blockSize" type="int"/>
      <doc>
      <![CDATA[Sets the block size (in bytes) for the file system to use. All regular files will be
 allocated blocks of the given size, so this is the minimum granularity for file size.

 <p>The default is 8192 bytes (8 KB).]]>
      </doc>
    </method>
    <method name="setMaxSize" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="maxSize" type="long"/>
      <doc>
      <![CDATA[Sets the maximum size (in bytes) for the file system's in-memory file storage. This maximum
 size determines the maximum number of blocks that can be allocated to regular files, so it
 should generally be a multiple of the {@linkplain #setBlockSize(int) block size}. The actual
 maximum size will be the nearest multiple of the block size that is less than or equal to the
 given size.

 <p><b>Note:</b> The in-memory file storage will not be eagerly initialized to this size, so
 it won't use more memory than is needed for the files you create. Also note that in addition
 to this limit, you will of course be limited by the amount of heap space available to the JVM
 and the amount of heap used by other objects, both in the file system and elsewhere.

 <p>The default is 4 GB.]]>
      </doc>
    </method>
    <method name="setMaxCacheSize" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="maxCacheSize" type="long"/>
      <doc>
      <![CDATA[Sets the maximum amount of unused space (in bytes) in the file system's in-memory file
 storage that should be cached for reuse. By default, this will be equal to the {@linkplain
 #setMaxSize(long) maximum size} of the storage, meaning that all space that is freed when
 files are truncated or deleted is cached for reuse. This helps to avoid lots of garbage
 collection when creating and deleting many files quickly. This can be set to 0 to disable
 caching entirely (all freed blocks become available for garbage collection) or to some other
 number to put an upper bound on the maximum amount of unused space the file system will keep
 around.

 <p>Like the maximum size, the actual value will be the closest multiple of the block size
 that is less than or equal to the given size.]]>
      </doc>
    </method>
    <method name="setAttributeViews" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="first" type="java.lang.String"/>
      <param name="more" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Sets the attribute views the file system should support. By default, the following views may
 be specified:

 <table>
   <tr>
     <td><b>Name</b></td>
     <td><b>View Interface</b></td>
     <td><b>Attributes Interface</b></td>
   </tr>
   <tr>
     <td>{@code "basic"}</td>
     <td>{@link java.nio.file.attribute.BasicFileAttributeView BasicFileAttributeView}</td>
     <td>{@link java.nio.file.attribute.BasicFileAttributes BasicFileAttributes}</td>
   </tr>
   <tr>
     <td>{@code "owner"}</td>
     <td>{@link java.nio.file.attribute.FileOwnerAttributeView FileOwnerAttributeView}</td>
     <td>--</td>
   </tr>
   <tr>
     <td>{@code "posix"}</td>
     <td>{@link java.nio.file.attribute.PosixFileAttributeView PosixFileAttributeView}</td>
     <td>{@link java.nio.file.attribute.PosixFileAttributes PosixFileAttributes}</td>
   </tr>
   <tr>
     <td>{@code "unix"}</td>
     <td>--</td>
     <td>--</td>
   </tr>
   <tr>
     <td>{@code "dos"}</td>
     <td>{@link java.nio.file.attribute.DosFileAttributeView DosFileAttributeView}</td>
     <td>{@link java.nio.file.attribute.DosFileAttributes DosFileAttributes}</td>
   </tr>
   <tr>
     <td>{@code "acl"}</td>
     <td>{@link java.nio.file.attribute.AclFileAttributeView AclFileAttributeView}</td>
     <td>--</td>
   </tr>
   <tr>
     <td>{@code "user"}</td>
     <td>{@link java.nio.file.attribute.UserDefinedFileAttributeView UserDefinedFileAttributeView}</td>
     <td>--</td>
   </tr>
 </table>

 <p>If any other views should be supported, attribute providers for those views must be
 {@linkplain #addAttributeProvider(AttributeProvider) added}.]]>
      </doc>
    </method>
    <method name="addAttributeProvider" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="provider" type="com.google.common.jimfs.AttributeProvider"/>
      <doc>
      <![CDATA[Adds an attribute provider for a custom view for the file system to support.]]>
      </doc>
    </method>
    <method name="setDefaultAttributeValue" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attribute" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets the default value to use for the given file attribute when creating new files. The
 attribute must be in the form "view:attribute". The value must be of a type that the provider
 for the view accepts.

 <p>For the included attribute views, default values can be set for the following attributes:

 <table>
   <tr>
     <th>Attribute</th>
     <th>Legal Types</th>
   </tr>
   <tr>
     <td>{@code "owner:owner"}</td>
     <td>{@code String} (user name)</td>
   </tr>
   <tr>
     <td>{@code "posix:group"}</td>
     <td>{@code String} (group name)</td>
   </tr>
   <tr>
     <td>{@code "posix:permissions"}</td>
     <td>{@code String} (format "rwxrw-r--"), {@code Set<PosixFilePermission>}</td>
   </tr>
   <tr>
     <td>{@code "dos:readonly"}</td>
     <td>{@code Boolean}</td>
   </tr>
   <tr>
     <td>{@code "dos:hidden"}</td>
     <td>{@code Boolean}</td>
   </tr>
   <tr>
     <td>{@code "dos:archive"}</td>
     <td>{@code Boolean}</td>
   </tr>
   <tr>
     <td>{@code "dos:system"}</td>
     <td>{@code Boolean}</td>
   </tr>
   <tr>
     <td>{@code "acl:acl"}</td>
     <td>{@code List<AclEntry>}</td>
   </tr>
 </table>]]>
      </doc>
    </method>
    <method name="setFileTimeSource" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="com.google.common.jimfs.FileTimeSource"/>
      <doc>
      <![CDATA[Sets the {@link FileTimeSource} that will supply the current time for this file system.

 @since 1.3]]>
      </doc>
    </method>
    <method name="setRoots" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="first" type="java.lang.String"/>
      <param name="more" type="java.lang.String[]"/>
      <doc>
      <![CDATA[Sets the roots for the file system.

 @throws InvalidPathException if any of the given roots is not a valid path for this builder's
     path type
 @throws IllegalArgumentException if any of the given roots is a valid path for this builder's
     path type but is not a root path with no name elements]]>
      </doc>
    </method>
    <method name="setWorkingDirectory" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="workingDirectory" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the path to the working directory for the file system. The working directory must be an
 absolute path starting with one of the configured roots.

 @throws InvalidPathException if the given path is not valid for this builder's path type
 @throws IllegalArgumentException if the given path is valid for this builder's path type but
     is not an absolute path]]>
      </doc>
    </method>
    <method name="setSupportedFeatures" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="features" type="com.google.common.jimfs.Feature[]"/>
      <doc>
      <![CDATA[Sets the given features to be supported by the file system. Any features not provided here
 will not be supported.]]>
      </doc>
    </method>
    <method name="setWatchServiceConfiguration" return="com.google.common.jimfs.Configuration.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.google.common.jimfs.WatchServiceConfiguration"/>
      <doc>
      <![CDATA[Sets the configuration that {@link WatchService} instances created by the file system should
 use. The default configuration polls watched directories for changes every 5 seconds.

 @since 1.1]]>
      </doc>
    </method>
    <method name="build" return="com.google.common.jimfs.Configuration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new immutable configuration object from this builder.]]>
      </doc>
    </method>
    <field name="DEFAULT_BLOCK_SIZE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[8 KB.]]>
      </doc>
    </field>
    <field name="DEFAULT_MAX_SIZE" type="long"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[4 GB.]]>
      </doc>
    </field>
    <field name="DEFAULT_MAX_CACHE_SIZE" type="long"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Equal to the configured max size.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Mutable builder for {@link Configuration} objects.]]>
    </doc>
  </class>
  <!-- end class com.google.common.jimfs.Configuration.Builder -->
  <!-- start class com.google.common.jimfs.Feature -->
  <class name="Feature" extends="java.lang.Enum&lt;com.google.common.jimfs.Feature&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="com.google.common.jimfs.Feature[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="com.google.common.jimfs.Feature"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Optional file system features that may be supported or unsupported by a Jimfs file system
 instance.

 @author Colin Decker]]>
    </doc>
  </class>
  <!-- end class com.google.common.jimfs.Feature -->
  <!-- start class com.google.common.jimfs.File -->
  <class name="File" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="id" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the ID of this file.]]>
      </doc>
    </method>
    <method name="size" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the size, in bytes, of this file's content. Directories and symbolic links have a size
 of 0.]]>
      </doc>
    </method>
    <method name="isDirectory" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not this file is a directory.]]>
      </doc>
    </method>
    <method name="isRegularFile" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not this file is a regular file.]]>
      </doc>
    </method>
    <method name="isSymbolicLink" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not this file is a symbolic link.]]>
      </doc>
    </method>
    <method name="links" return="int"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current count of links to this file.]]>
      </doc>
    </method>
    <method name="getCreationTime" return="java.nio.file.attribute.FileTime"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the creation time of the file.]]>
      </doc>
    </method>
    <method name="getLastAccessTime" return="java.nio.file.attribute.FileTime"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the last access time of the file.]]>
      </doc>
    </method>
    <method name="getLastModifiedTime" return="java.nio.file.attribute.FileTime"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the last modified time of the file.]]>
      </doc>
    </method>
    <method name="getAttributeNames" return="com.google.common.collect.ImmutableSet&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="view" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the names of the attributes contained in the given attribute view in the file's
 attributes table.]]>
      </doc>
    </method>
    <method name="getAttribute" return="Object"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="view" type="java.lang.String"/>
      <param name="attribute" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets the value of the given attribute in the given view.]]>
      </doc>
    </method>
    <method name="setAttribute"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="view" type="java.lang.String"/>
      <param name="attribute" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets the given attribute in the given view to the given value.]]>
      </doc>
    </method>
    <method name="deleteAttribute"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="view" type="java.lang.String"/>
      <param name="attribute" type="java.lang.String"/>
      <doc>
      <![CDATA[Deletes the given attribute from the given view.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A file object, containing both the file's metadata and content.

 @author Colin Decker]]>
    </doc>
  </class>
  <!-- end class com.google.common.jimfs.File -->
  <!-- start interface com.google.common.jimfs.FileLookup -->
  <interface name="FileLookup"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="lookup" return="com.google.common.jimfs.File"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Looks up the file.

 @throws IOException if the lookup fails for any reason, such as the file not existing]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Callback for looking up a file.

 @author Colin Decker]]>
    </doc>
  </interface>
  <!-- end interface com.google.common.jimfs.FileLookup -->
  <!-- start interface com.google.common.jimfs.FileTimeSource -->
  <interface name="FileTimeSource"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="now" return="java.nio.file.attribute.FileTime"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current time according to this source as a {@link FileTime}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A source of the current time as a {@link FileTime}, to enable fake time sources for testing.

 @since 1.3]]>
    </doc>
  </interface>
  <!-- end interface com.google.common.jimfs.FileTimeSource -->
  <!-- start class com.google.common.jimfs.Handler -->
  <class name="Handler" extends="java.net.URLStreamHandler"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Handler"
      static="false" final="false" visibility="public"
      deprecated="Not intended to be called directly; this class is only for use by Java itself.">
      <doc>
      <![CDATA[@deprecated Not intended to be called directly; this class is only for use by Java itself.]]>
      </doc>
    </constructor>
    <method name="openConnection" return="java.net.URLConnection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="url" type="java.net.URL"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getHostAddress" return="InetAddress"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="url" type="java.net.URL"/>
    </method>
    <doc>
    <![CDATA[{@link URLStreamHandler} implementation for jimfs. Named {@code Handler} so that the class can be
 found by Java as described in the documentation for {@link URL#URL(String, String, int, String)
 URL}.

 <p>This class is only public because it is necessary for Java to find it. It is not intended to
 be used directly.

 @author Colin Decker
 @since 1.1]]>
    </doc>
  </class>
  <!-- end class com.google.common.jimfs.Handler -->
  <!-- start class com.google.common.jimfs.Jimfs -->
  <class name="Jimfs" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="newFileSystem" return="java.nio.file.FileSystem"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new in-memory file system with a {@linkplain Configuration#forCurrentPlatform()
 default configuration} appropriate to the current operating system.

 <p>More specifically, if the operating system is Windows, {@link Configuration#windows()} is
 used; if the operating system is Mac OS X, {@link Configuration#osX()} is used; otherwise,
 {@link Configuration#unix()} is used.]]>
      </doc>
    </method>
    <method name="newFileSystem" return="java.nio.file.FileSystem"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Creates a new in-memory file system with a {@linkplain Configuration#forCurrentPlatform()
 default configuration} appropriate to the current operating system.

 <p>More specifically, if the operating system is Windows, {@link Configuration#windows()} is
 used; if the operating system is Mac OS X, {@link Configuration#osX()} is used; otherwise,
 {@link Configuration#unix()} is used.

 <p>The returned file system uses the given name as the host part of its URI and the URIs of
 paths in the file system. For example, given the name {@code my-file-system}, the file system's
 URI will be {@code jimfs://my-file-system} and the URI of the path {@code /foo/bar} will be
 {@code jimfs://my-file-system/foo/bar}.]]>
      </doc>
    </method>
    <method name="newFileSystem" return="java.nio.file.FileSystem"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="com.google.common.jimfs.Configuration"/>
      <doc>
      <![CDATA[Creates a new in-memory file system with the given configuration.]]>
      </doc>
    </method>
    <method name="newFileSystem" return="java.nio.file.FileSystem"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="configuration" type="com.google.common.jimfs.Configuration"/>
      <doc>
      <![CDATA[Creates a new in-memory file system with the given configuration.

 <p>The returned file system uses the given name as the host part of its URI and the URIs of
 paths in the file system. For example, given the name {@code my-file-system}, the file system's
 URI will be {@code jimfs://my-file-system} and the URI of the path {@code /foo/bar} will be
 {@code jimfs://my-file-system/foo/bar}.]]>
      </doc>
    </method>
    <field name="URI_SCHEME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The URI scheme for the Jimfs file system ("jimfs").]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Static factory methods for creating new Jimfs file systems. File systems may either be created
 with a basic configuration matching the current operating system or by providing a specific
 {@link Configuration}. Basic {@linkplain Configuration#unix() UNIX}, {@linkplain
 Configuration#osX() Mac OS X} and {@linkplain Configuration#windows() Windows} configurations are
 provided.

 <p>Examples:

 <pre>
   // A file system with a configuration similar to the current OS
   FileSystem fileSystem = Jimfs.newFileSystem();

   // A file system with paths and behavior generally matching that of Windows
   FileSystem windows = Jimfs.newFileSystem(Configuration.windows());  </pre>

 <p>Additionally, various behavior of the file system can be customized by creating a custom
 {@link Configuration}. A modified version of one of the existing default configurations can be
 created using {@link Configuration#toBuilder()} or a new configuration can be created from
 scratch with {@link Configuration#builder(PathType)}. See {@link Configuration.Builder} for what
 can be configured.

 <p>Examples:

 <pre>
   // Modify the default UNIX configuration
   FileSystem fileSystem = Jimfs.newFileSystem(Configuration.unix()
       .toBuilder()
       .setAttributeViews("basic", "owner", "posix", "unix")
       .setWorkingDirectory("/home/user")
       .setBlockSize(4096)
       .build());

   // Create a custom configuration
   Configuration config = Configuration.builder(PathType.windows())
       .setRoots("C:\\", "D:\\", "E:\\")
       // ...
       .build();  </pre>

 @author Colin Decker]]>
    </doc>
  </class>
  <!-- end class com.google.common.jimfs.Jimfs -->
  <!-- start class com.google.common.jimfs.PathNormalization -->
  <class name="PathNormalization" extends="java.lang.Enum&lt;com.google.common.jimfs.PathNormalization&gt;"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.common.base.Function&lt;java.lang.String, java.lang.String&gt;"/>
    <method name="values" return="com.google.common.jimfs.PathNormalization[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="com.google.common.jimfs.PathNormalization"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="apply" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <doc>
      <![CDATA[Applies this normalization to the given string, returning the normalized result.]]>
      </doc>
    </method>
    <method name="patternFlags" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the flags that should be used when creating a regex {@link Pattern} in order to
 approximate this normalization.]]>
      </doc>
    </method>
    <method name="normalize" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <param name="normalizations" type="java.lang.Iterable&lt;com.google.common.jimfs.PathNormalization&gt;"/>
      <doc>
      <![CDATA[Applies the given normalizations to the given string in order, returning the normalized result.]]>
      </doc>
    </method>
    <method name="compilePattern" return="java.util.regex.Pattern"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="regex" type="java.lang.String"/>
      <param name="normalizations" type="java.lang.Iterable&lt;com.google.common.jimfs.PathNormalization&gt;"/>
      <doc>
      <![CDATA[Compiles a regex pattern using flags based on the given normalizations.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Normalizations that can be applied to names in paths. Includes Unicode normalizations and
 normalizations for case insensitive paths. These normalizations can be set in {@code
 Configuration.Builder} when creating a Jimfs file system instance and are automatically applied
 to paths in the file system.

 @author Colin Decker]]>
    </doc>
  </class>
  <!-- end class com.google.common.jimfs.PathNormalization -->
  <!-- start class com.google.common.jimfs.PathType -->
  <class name="PathType" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PathType" type="boolean, char, char[]"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <method name="unix" return="com.google.common.jimfs.PathType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a Unix-style path type. "/" is both the root and the only separator. Any path starting
 with "/" is considered absolute. The nul character ('\0') is disallowed in paths.]]>
      </doc>
    </method>
    <method name="windows" return="com.google.common.jimfs.PathType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a Windows-style path type. The canonical separator character is "\". "/" is also
 treated as a separator when parsing paths.

 <p>As much as possible, this implementation follows the information provided in <a
 href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx">this
 article</a>. Paths with drive-letter roots (e.g. "C:\") and paths with UNC roots (e.g.
 "\\host\share\") are supported.

 <p>Two Windows path features are not currently supported as they are too Windows-specific:

 <ul>
   <li>Relative paths containing a drive-letter root, for example "C:" or "C:foo\bar". Such
       paths have a root component and optionally have names, but are <i>relative</i> paths,
       relative to the working directory of the drive identified by the root.
   <li>Absolute paths with no root, for example "\foo\bar". Such paths are absolute paths on the
       current drive.
 </ul>]]>
      </doc>
    </method>
    <method name="allowsMultipleRoots" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not this type of path allows multiple root directories.]]>
      </doc>
    </method>
    <method name="getSeparator" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the canonical separator for this path type. The returned string always has a length of
 one.]]>
      </doc>
    </method>
    <method name="getOtherSeparators" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the other separators that are recognized when parsing a path. If no other separators
 are recognized, the empty string is returned.]]>
      </doc>
    </method>
    <method name="joiner" return="com.google.common.base.Joiner"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the path joiner for this path type.]]>
      </doc>
    </method>
    <method name="splitter" return="com.google.common.base.Splitter"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the path splitter for this path type.]]>
      </doc>
    </method>
    <method name="emptyPath" return="com.google.common.jimfs.PathType.ParseResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an empty path.]]>
      </doc>
    </method>
    <method name="parsePath" return="com.google.common.jimfs.PathType.ParseResult"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.lang.String"/>
      <doc>
      <![CDATA[Parses the given strings as a path.

 @throws InvalidPathException if the path isn't valid for this path type]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="root" type="String"/>
      <param name="names" type="java.lang.Iterable&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Returns the string form of the given path.]]>
      </doc>
    </method>
    <method name="toUriPath" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="root" type="java.lang.String"/>
      <param name="names" type="java.lang.Iterable&lt;java.lang.String&gt;"/>
      <param name="directory" type="boolean"/>
      <doc>
      <![CDATA[Returns the string form of the given path for use in the path part of a URI. The root element
 is not nullable as the path must be absolute. The elements of the returned path <i>do not</i>
 need to be escaped. The {@code directory} boolean indicates whether the file the URI is for is
 known to be a directory.]]>
      </doc>
    </method>
    <method name="parseUriPath" return="com.google.common.jimfs.PathType.ParseResult"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="uriPath" type="java.lang.String"/>
      <doc>
      <![CDATA[Parses a path from the given URI path.

 @throws InvalidPathException if the given path isn't valid for this path type]]>
      </doc>
    </method>
    <method name="toUri" return="java.net.URI"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="fileSystemUri" type="java.net.URI"/>
      <param name="root" type="java.lang.String"/>
      <param name="names" type="java.lang.Iterable&lt;java.lang.String&gt;"/>
      <param name="directory" type="boolean"/>
      <doc>
      <![CDATA[Creates a URI for the path with the given root and names in the file system with the given URI.]]>
      </doc>
    </method>
    <method name="fromUri" return="com.google.common.jimfs.PathType.ParseResult"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.net.URI"/>
      <doc>
      <![CDATA[Parses a path from the given URI.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An object defining a specific type of path. Knows how to parse strings to a path and how to
 render a path as a string as well as what the path separator is and what other separators are
 recognized when parsing paths.

 @author Colin Decker]]>
    </doc>
  </class>
  <!-- end class com.google.common.jimfs.PathType -->
  <!-- start class com.google.common.jimfs.PathType.ParseResult -->
  <class name="PathType.ParseResult" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ParseResult" type="String, java.lang.Iterable&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isAbsolute" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not this result is an absolute path.]]>
      </doc>
    </method>
    <method name="isRoot" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not this result represents a root path.]]>
      </doc>
    </method>
    <method name="root" return="String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the parsed root element, or null if there was no root.]]>
      </doc>
    </method>
    <method name="names" return="java.lang.Iterable&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the parsed name elements.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Simple result of parsing a path.]]>
    </doc>
  </class>
  <!-- end class com.google.common.jimfs.PathType.ParseResult -->
  <!-- start class com.google.common.jimfs.SystemJimfsFileSystemProvider -->
  <class name="SystemJimfsFileSystemProvider" extends="java.nio.file.spi.FileSystemProvider"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="SystemJimfsFileSystemProvider"
      static="false" final="false" visibility="public"
      deprecated="Not intended to be called directly; this class is only for use by Java itself.">
      <doc>
      <![CDATA[@deprecated Not intended to be called directly; this class is only for use by Java itself.]]>
      </doc>
    </constructor>
    <method name="getScheme" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="newFileSystem" return="java.nio.file.FileSystem"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.net.URI"/>
      <param name="env" type="java.util.Map&lt;java.lang.String, ?&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getFileSystem" return="java.nio.file.FileSystem"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.net.URI"/>
    </method>
    <method name="getPath" return="java.nio.file.Path"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.net.URI"/>
    </method>
    <method name="newFileSystem" return="java.nio.file.FileSystem"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.nio.file.Path"/>
      <param name="env" type="java.util.Map&lt;java.lang.String, ?&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="removeFileSystemRunnable" return="java.lang.Runnable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.net.URI"/>
      <doc>
      <![CDATA[Returns a runnable that, when run, removes the file system with the given URI from this
 provider.]]>
      </doc>
    </method>
    <method name="newByteChannel" return="java.nio.channels.SeekableByteChannel"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.nio.file.Path"/>
      <param name="options" type="java.util.Set&lt;? extends java.nio.file.OpenOption&gt;"/>
      <param name="attrs" type="java.nio.file.attribute.FileAttribute[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="newDirectoryStream" return="java.nio.file.DirectoryStream&lt;java.nio.file.Path&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dir" type="java.nio.file.Path"/>
      <param name="filter" type="java.nio.file.DirectoryStream.Filter&lt;? super java.nio.file.Path&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createDirectory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dir" type="java.nio.file.Path"/>
      <param name="attrs" type="java.nio.file.attribute.FileAttribute[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="delete"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.nio.file.Path"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.nio.file.Path"/>
      <param name="target" type="java.nio.file.Path"/>
      <param name="options" type="java.nio.file.CopyOption[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="move"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.nio.file.Path"/>
      <param name="target" type="java.nio.file.Path"/>
      <param name="options" type="java.nio.file.CopyOption[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="isSameFile" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.nio.file.Path"/>
      <param name="path2" type="java.nio.file.Path"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="isHidden" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.nio.file.Path"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getFileStore" return="java.nio.file.FileStore"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.nio.file.Path"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="checkAccess"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.nio.file.Path"/>
      <param name="modes" type="java.nio.file.AccessMode[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getFileAttributeView" return="V extends java.nio.file.attribute.FileAttributeView"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.nio.file.Path"/>
      <param name="type" type="java.lang.Class&lt;V&gt;"/>
      <param name="options" type="java.nio.file.LinkOption[]"/>
    </method>
    <method name="readAttributes" return="A extends java.nio.file.attribute.BasicFileAttributes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.nio.file.Path"/>
      <param name="type" type="java.lang.Class&lt;A&gt;"/>
      <param name="options" type="java.nio.file.LinkOption[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="readAttributes" return="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.nio.file.Path"/>
      <param name="attributes" type="java.lang.String"/>
      <param name="options" type="java.nio.file.LinkOption[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setAttribute"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="java.nio.file.Path"/>
      <param name="attribute" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
      <param name="options" type="java.nio.file.LinkOption[]"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[{@link FileSystemProvider} implementation for Jimfs that is loaded by the system as a service.
 This implementation only serves as a cache for file system instances and does not implement
 actual file system operations.

 <p>While this class is public, it should not be used directly. To create a new file system
 instance, see {@link Jimfs}. For other operations, use the public APIs in {@code java.nio.file}.

 @author Colin Decker
 @since 1.1]]>
    </doc>
  </class>
  <!-- end class com.google.common.jimfs.SystemJimfsFileSystemProvider -->
  <!-- start class com.google.common.jimfs.WatchServiceConfiguration -->
  <class name="WatchServiceConfiguration" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="polling" return="com.google.common.jimfs.WatchServiceConfiguration"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="interval" type="long"/>
      <param name="timeUnit" type="java.util.concurrent.TimeUnit"/>
      <doc>
      <![CDATA[Returns a configuration for a {@link WatchService} that polls watched directories for changes
 every {@code interval} of the given {@code timeUnit} (e.g. every 5 {@link TimeUnit#SECONDS
 seconds}).]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Configuration for the {@link WatchService} implementation used by a file system.

 @author Colin Decker
 @since 1.1]]>
    </doc>
  </class>
  <!-- end class com.google.common.jimfs.WatchServiceConfiguration -->
</package>

</api>
